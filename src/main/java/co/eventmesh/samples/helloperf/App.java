/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package co.eventmesh.samples.helloperf;


import java.util.Arrays;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.solacesystems.jcsmp.JCSMPException;
import com.solacesystems.jcsmp.XMLMessageProducer;


public class App {
	static private Logger logger = LoggerFactory.getLogger(App.class);

    public String getGreeting() {
        return "Hello world.";
    }

    
    public static void main(String[] args) throws Exception {
    	logger.info("App Starting");
//    	logger.info(createString(1024));
    	Configuration.setupDefaults(args);
    	
        startPublishing();    		
    	
    	
    	
//    	new Thread(new PublishThread(5, "Hello World"), "publish-thread").start();
//    	System.out.println("0:" + args[0] + "1:" + args[1] + "2:" + args[2]);
//    	
//    	HashMap<String, String> parsedArgs = Configuration.getArguments(args);    		
//        System.out.println("ParsedArgs = " + parsedArgs);
//        SimpleThreadPool.main(args);
    }
    
    public static String createString(int stringLength){
        
        //create char array of specified length
        char[] charArray = new char[stringLength];
        char ch = 'A';

        
        //fill all elements with the specified char
        Arrays.fill(charArray, ch);
        
        //create string from char array and return
        return new String(charArray);
    }
    
    public static void startPublishing() throws JCSMPException {
    	int threadCount = 2;
    	int messagesize = 4;
    	
    	if (Configuration.getDefaults().get("threadcount") != null) {
    		threadCount = Integer.parseInt(Configuration.getDefaults().get("threadcount"));    		
    	}
    	

    	if (Configuration.getDefaults().get("messagesize") != null) {
    		messagesize = Integer.parseInt(Configuration.getDefaults().get("messagesize"));    		
    	}

    	for (int i = 0; i < threadCount; i++) {

    		startPublishingThread(i, messagesize);    		
    	}

    	
    }
    
    
    public static void startPublishingThread(int threadNo, int messageSize) throws JCSMPException {
    	int repeatCount = Integer.parseInt(Configuration.getDefaults().get("publishCount"));
    	String publishTopic = Configuration.getDefaults().get("publishTopic");
    	String messageStr = createString(messageSize);

    	PublishThread publishThread = new PublishThread(publishTopic, repeatCount, messageStr);
    	PublishEventHandler handler = new PublishEventHandler();
    	XMLMessageProducer prod = SolacePublisherFactory.getProducer(handler);
    	publishThread.setProducerListener(prod, handler);
    	
    	new Thread(publishThread, "publish-thread-" + threadNo).start();    	
    }
    
    
}
