/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package co.eventmesh.samples.helloperf;

import java.util.HashMap;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Configuration {
	static private Logger logger = LoggerFactory.getLogger(Configuration.class);

	private static Options options = optionsBuilder();
	private static HashMap<String, String> hmap = new HashMap<String,String>();

    public static void Usage() {
    	System.err.println("Usage:");
    	// automatically generate the help statement
    	HelpFormatter formatter = new HelpFormatter();
    	formatter.printHelp( "App", options );
    	
    }
    
    
    private static Options optionsBuilder() {
    	Options options = new Options();
       	
    	options.addOption(Option.builder("h")
   		     .required(false)
   		     .desc("host FQDN")
   		     .longOpt("hostname")
   		     .numberOfArgs(1)
   		     .build());
    	options.addOption(Option.builder("u")
      		     .required(false)
      		     .desc("username")
      		     .longOpt("username")
      		     .numberOfArgs(1)
      		     .build());
    	options.addOption(Option.builder("p")
      		     .required(false)
      		     .desc("password")
      		     .longOpt("password")
      		     .numberOfArgs(1)
      		     .build());
    	options.addOption(Option.builder("o")
     		     .required(true)
     		     .desc("publishCount")
     		     .longOpt("publishCount")
     		     .numberOfArgs(1)
     		     .build());
    	options.addOption(Option.builder("v")
     		     .required(true)
     		     .desc("vpn name")
     		     .longOpt("vpn")
     		     .numberOfArgs(1)
     		     .build());
    	options.addOption(Option.builder("j")
    		     .required(true)
    		     .desc("publishTopic")
    		     .longOpt("publishTopic")
    		     .numberOfArgs(1)
    		     .build());
//    	options.addOption(Option.builder("w")
//     		     .required(true)
//     		     .desc("publish ack window")
//     		     .longOpt("pubackwindow")
//     		     .numberOfArgs(1)
//     		     .build());
//    	options.addOption(Option.builder("v")
//     		     .required(false)
//     		     .desc("verbose")
//     		     .longOpt("verbose")
//     		     .numberOfArgs(0)
//     		     .build());
    	return(options);
    	
    }
    
    private static void updateArgument(String key, CommandLine cmd) {
    	if (cmd.hasOption(key))
    		hmap.put(key, cmd.getOptionValue(key));
    }
    
    public static HashMap<String, String> setupDefaults(String[] args) { 
//    	hmap.put("hostname", "localhost");
//    	hmap.put("port", "55555");
    	
    	CommandLineParser parser = new DefaultParser();
    	CommandLine cmd;
		try {
			cmd = parser.parse( options, args);
	    	updateArgument("publishCount", cmd);
	    	updateArgument("hostname", cmd);
	    	updateArgument("publishTopic", cmd);
	    	
	    	updateArgument("username", cmd);
	    	updateArgument("password", cmd);
	    	updateArgument("vpn", cmd);
	    	updateArgument("port", cmd);
	    	return(hmap);
		} catch (ParseException e) {
    		logger.error("Error in command line arguments. " + e.getMessage());
    		Usage();
    		System.exit(1);
		}
		throw new RuntimeException("Unknown Error");
    	
    }

    public static HashMap<String, String> getDefaults() { 
    	return hmap;
    	
    }

}
